package ru.job4j.sort;

import java.util.Arrays;

/**
 * реализовать механизм возврата монет в лендинговых аппаратах.
 * У вас есть купюра 50, 100 рублей. Вы хотите купить кофе на 35.
 * Если вы засунули 50 рублей, то автомат должен вернут 15 рублей (монетами 10 и 5).
 * Автомат может вернуть только монеты.
 *
 * Для решение этой задачу нужно использовать жадный алгоритм.
 *  Мы берем монету наибольшего номинала - 10. Далее вычитаем из суммы.
 *  Если остаток больше 0. то операцию повторяем. если меньше, то берем монету номиналом меньше.
 * И так пока не дойдет до монеты в 1 рубль. В помощью нее мы добиваем остаток
 * В нем нужно использовать цикл for - для прохода по монетам и while - для проверки равенства
 *
 * Жадный алгоритм(greedy algorithm) - метод решения оптимизационных задач, основанный на том, что процесс принятия решения
 * можно разбить на элементарные шаги, на каждом из которых принимается отдельное решение.
 * Решение принимаемое на каждом шаге должно быть оптимальным только на текущем шаге и должно
 * приниматься без учета предыдущих или последующих решений.
 * В жадном алгоритме всегда делается выбор, который кажется самым лучшим в данный момент - т.е. производится локально оптимальный выбор в надежде, что
 * он приведет к оптимальному решению глобальной задачи.
 * Признаки того, что задачу возможно решить при помощи жадного алгоритма:
 * 1.Задачу можно разбить на подзадачи;
 * 2. Величины, рассматриваемые в задаче, можно дробить так же на подзадачи;
 * 3.Сумма оптимальных решений для двух подзадач даст оптимальное решения для всей задачи.
 */
public class Machine {
    private final int[] COINS = {10, 5, 2, 1}; // типы монет номиналом

    public int[] change(int money, int price) {
        int[] rsl = new int[100]; // весь возможный вариант сдачи
        int size = 0;
        int dif = money - price;
        for(int coin:COINS){
            if (dif-COINS[coin]>0){
                dif-=COINS[coin];
                rsl[size] = COINS[size];
                size++;
            }
        }
        return Arrays.copyOf(rsl, size);
        }
}
