package ru.job4j.tracker;

/**
 * В классе StartUI есть методы: createItem, replaceItem и тд.Давайте рассмотрим метод createItem. Давайте попытаемся написать на этот метод тест.Как оказывается мы не можем написать тест на этот метод. Проблема в том, что ввод данных осуществляет пользователь, а он может ввести что угодно.
 *
 * Как решить эту ситуацию? Класс StartUI зависит от интерфейса Input.Теперь мы вспоминаем о термине полиморфизм - много форм. Мы можем создать 100500 классов, которые будут реализовывать интерфейс Input. В предыдущем уроке мы уже создали класс StubInput
 *
 * Давайте его доработаем таким образом, чтобы метод ask возвращал параметры, которые МЫ ХОТИМ!!!
 *
 * Давайте добавим в этот класс поле с вариантами ответов пользователя. Это поле будет описывать массив строк. а так же добавим счетчик, чтобы при повторном вызове метода ask мы получали следующую ячейку из нашего массива.
 * Сейчас мы можем подставить в Input объект StubInput, в котором мы можем запрограммировать ввод от пользователя
 */
public class StubInput implements Input {
    /**
     * Это поле содержит последовательность ответов пользователя.
     * Например. Если пользователь хочет выбрать добавление новой заявки ему нужно ввести:
     * 0 - выбор пункта меня "добавить новую заявку".
     * name - имя заявки
     * desc - описание заявки
     * 6 - выйти из трекера.
     */
    private final String[] value;

    /**
     * Поле считает количество вызовов метода ask.
     * При каждом вызове надо передвинуть указатель на новое число.
     * добавим счетчик, чтобы при повторном вызове метода ask мы получали следующую ячейку из нашего массива.
     */
    private int position;

    public StubInput(final String[] value) {
        this.value = value;
    }

    /**
     * Давайте рассмотрим, как работает этот метод.
     * у нас есть объект в котором содержатся заранее продуманные ответы.
     * При последовательном вызове метода ask нам надо возвращать соответствующие данные.
     * Как если бы мы симулировали поведение пользователя.
     * Для этого при каждом вызове метода ask мы увеличиваем счетчик и
     * при следующем вызове он вернет нам новое значение.
     */
    @Override
    public String ask(String question) {
        return this.value[this.position++];
    }

    @Override
    public int askInt(String question) {
        return Integer.valueOf(ask(question));
    }

    @Override
    public int askInt(String question, int max) {
        return askInt(question);
    }
}
